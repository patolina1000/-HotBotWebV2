const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '.env') });
const axios = require('axios');

/**
 * Teste da API de Eventos do Kwai
 * 
 * Este teste verifica se os eventos est√£o sendo enviados corretamente para a Kwai Event API
 * usando o click_id fornecido: Lw2HvYVkoj1MyzQwwNX4dg
 */

// Carregar vari√°veis de ambiente
require('dotenv').config();

// Debug das vari√°veis de ambiente
console.log('üîç DEBUG - Vari√°veis de ambiente:');
console.log('   KWAI_PIXEL_ID:', process.env.KWAI_PIXEL_ID);
console.log('   KWAI_ACCESS_TOKEN:', process.env.KWAI_ACCESS_TOKEN ? process.env.KWAI_ACCESS_TOKEN.substring(0, 10) + '...' : 'undefined');
console.log('   NODE_ENV:', process.env.NODE_ENV);
console.log('');

// Configura√ß√µes de teste
const TEST_CONFIG = {
  baseUrl: 'https://www.adsnebula.com/log/common/api',
  clickId: 'Lw2HvYVkoj1MyzQwwNX4dg', // Click ID fixo para teste
  pixelId: process.env.KWAI_PIXEL_ID || 'TEST_PIXEL_ID',
  accessToken: process.env.KWAI_ACCESS_TOKEN || 'TEST_ACCESS_TOKEN',
  testFlag: false, // false para produ√ß√£o
  trackFlag: false, // false para produ√ß√£o
  isAttributed: 1,
  mmpcode: 'PL',
  pixelSdkVersion: '9.9.9'
};

/**
 * Fun√ß√£o para enviar evento de teste
 */
async function sendTestEvent(eventName, properties = {}) {
  try {
    console.log(`\nüéØ Enviando evento de teste: ${eventName}`);
    console.log(`üìã Click ID: ${TEST_CONFIG.clickId}`);
    console.log(`üîß Modo de teste: ${TEST_CONFIG.testFlag ? 'ATIVADO' : 'DESATIVADO'}`);
    console.log(`üìä Track Flag: ${TEST_CONFIG.trackFlag ? 'ATIVADO' : 'DESATIVADO'}`);

    const payload = {
      access_token: TEST_CONFIG.accessToken,
      clickid: TEST_CONFIG.clickId,
      event_name: eventName,
      pixelId: TEST_CONFIG.pixelId,
      testFlag: TEST_CONFIG.testFlag,
      trackFlag: TEST_CONFIG.trackFlag,
      is_attributed: TEST_CONFIG.isAttributed,
      mmpcode: TEST_CONFIG.mmpcode,
      pixelSdkVersion: TEST_CONFIG.pixelSdkVersion
    };

    // Adicionar properties se fornecidas
    if (Object.keys(properties).length > 0) {
      payload.properties = JSON.stringify(properties);
      console.log(`üì¶ Properties:`, properties);
    }

    console.log(`üì§ Payload completo:`, JSON.stringify(payload, null, 2));

          const response = await axios.post(TEST_CONFIG.baseUrl, payload, {
        headers: {
          'Content-Type': 'application/json',
          'accept': 'application/json;charset=utf-8'
        },
        timeout: 15000
      });

    console.log(`‚úÖ ‚úÖ ‚úÖ EVENTO ${eventName} ENVIADO COM SUCESSO!`);
    console.log(`üìä Status: ${response.status}`);
    console.log(`üìÑ Resposta:`, JSON.stringify(response.data, null, 2));

    return { success: true, data: response.data };

  } catch (error) {
    console.error(`‚ùå ‚ùå ‚ùå ERRO ao enviar evento ${eventName}:`);
    console.error(`üìõ Mensagem: ${error.message}`);
    
    if (error.response) {
      console.error(`üìä Status: ${error.response.status}`);
      console.error(`üìÑ Resposta de erro:`, JSON.stringify(error.response.data, null, 2));
    }
    
    return { success: false, error: error.message };
  }
}

/**
 * Executar todos os testes
 */
async function runAllTests() {
  console.log('üöÄ INICIANDO TESTES DA KWAI EVENT API');
  console.log('=' .repeat(60));
  
  // Verificar configura√ß√µes
  console.log('üîß CONFIGURA√á√ïES DE TESTE:');
  console.log(`   Pixel ID: ${TEST_CONFIG.pixelId}`);
  console.log(`   Access Token: ${TEST_CONFIG.accessToken.substring(0, 10)}...`);
  console.log(`   Click ID: ${TEST_CONFIG.clickId}`);
  console.log(`   URL da API: ${TEST_CONFIG.baseUrl}`);
  console.log('=' .repeat(60));

  // Teste 1: EVENT_CONTENT_VIEW
  console.log('\nüì± TESTE 1: EVENT_CONTENT_VIEW');
  console.log('-' .repeat(40));
  await sendTestEvent('EVENT_CONTENT_VIEW', {
    content_id: 'test_content_001',
    currency: 'BRL'
  });

  // Aguardar 2 segundos entre testes
  await new Promise(resolve => setTimeout(resolve, 2000));

  // Teste 2: EVENT_ADD_TO_CART
  console.log('\nüõí TESTE 2: EVENT_ADD_TO_CART');
  console.log('-' .repeat(40));
  await sendTestEvent('EVENT_ADD_TO_CART', {
    value: 97.00,
    currency: 'BRL',
    content_id: 'test_content_001'
  });

  // Aguardar 2 segundos entre testes
  await new Promise(resolve => setTimeout(resolve, 2000));

  // Teste 3: EVENT_PURCHASE
  console.log('\nüí∞ TESTE 3: EVENT_PURCHASE');
  console.log('-' .repeat(40));
  await sendTestEvent('EVENT_PURCHASE', {
    value: 97.00,
    currency: 'BRL',
    content_id: 'test_content_001'
  });

  console.log('\nüéâ TESTES CONCLU√çDOS!');
  console.log('=' .repeat(60));
  console.log('üìã INSTRU√á√ïES:');
  console.log('1. Verifique se os eventos aparecem na tela de monitoramento do Kwai');
  console.log('2. Se houver erros, verifique as configura√ß√µes de ambiente');
  console.log('3. Para produ√ß√£o, altere testFlag e trackFlag para false');
  console.log('4. O click_id mudar√° a cada refresh da p√°gina');
}

/**
 * Teste individual de um evento espec√≠fico
 */
async function testSingleEvent(eventName, properties = {}) {
  console.log(`üéØ TESTE INDIVIDUAL: ${eventName}`);
  console.log('=' .repeat(50));
  
  const result = await sendTestEvent(eventName, properties);
  
  if (result.success) {
    console.log(`\n‚úÖ Teste do evento ${eventName} conclu√≠do com sucesso!`);
  } else {
    console.log(`\n‚ùå Teste do evento ${eventName} falhou!`);
  }
  
  return result;
}

// Executar testes se o arquivo for chamado diretamente
if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = {
  sendTestEvent,
  testSingleEvent,
  runAllTests,
  TEST_CONFIG
};
