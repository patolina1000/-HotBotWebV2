#!/usr/bin/env node

/**
 * Teste de Fuma√ßa para Bootstrap
 *
 * Testa se:
 * 1. O servidor falha corretamente com DATABASE_URL inv√°lido
 * 2. O servidor falha corretamente sem DATABASE_URL
 * 3. O sistema de bootstrap est√° funcionando
 */

const { spawn } = require('child_process');

async function testWithoutDatabase() {
  console.log('\nüß™ Teste 1: Verificar comportamento sem DATABASE_URL...');

  return new Promise((resolve) => {
    // Salvar DATABASE_URL atual
    const originalDatabaseUrl = process.env.DATABASE_URL;

    // Remover DATABASE_URL
    delete process.env.DATABASE_URL;

    console.log('üóëÔ∏è DATABASE_URL removida, iniciando servidor...');

    const child = spawn('node', ['server.js'], {
      stdio: 'pipe',
      env: { ...process.env }
    });

    let output = '';
    let hasError = false;

    child.stdout.on('data', (data) => {
      output += data.toString();
    });

    child.stderr.on('data', (data) => {
      output += data.toString();
      hasError = true;
    });

    child.on('close', (code) => {
      // Restaurar DATABASE_URL
      if (originalDatabaseUrl) {
        process.env.DATABASE_URL = originalDatabaseUrl;
      }

      console.log(`üì§ Processo filho encerrou com c√≥digo: ${code}`);
      console.log('üìã Output:', output);

      if (code !== 0) {
        console.log('‚úÖ Teste 1 PASSOU: processo saiu com c√≥digo de erro (como esperado)');
        resolve(true);
      } else {
        console.log('‚ùå Teste 1 FALHOU: processo deveria ter sa√≠do com erro');
        resolve(false);
      }
    });

    // Aguardar um pouco para o processo inicializar
    setTimeout(() => {
      if (!child.killed) {
        child.kill('SIGTERM');
      }
    }, 10000);
  });
}

async function testWithInvalidDatabase() {
  console.log('\nüß™ Teste 2: Verificar comportamento com DATABASE_URL inv√°lido...');

  return new Promise((resolve) => {
    // Salvar DATABASE_URL atual
    const originalDatabaseUrl = process.env.DATABASE_URL;

    // Definir DATABASE_URL inv√°lido
    process.env.DATABASE_URL = 'postgresql://invalid:invalid@localhost:5432/invalid';

    console.log('üî¥ DATABASE_URL definida como inv√°lida, iniciando servidor...');

    const child = spawn('node', ['server.js'], {
      stdio: 'pipe',
      env: { ...process.env }
    });

    let output = '';
    let hasError = false;

    child.stdout.on('data', (data) => {
      output += data.toString();
    });

    child.stderr.on('data', (data) => {
      output += data.toString();
      hasError = true;
    });

    child.on('close', (code) => {
      // Restaurar DATABASE_URL
      if (originalDatabaseUrl) {
        process.env.DATABASE_URL = originalDatabaseUrl;
      }

      console.log(`üì§ Processo filho encerrou com c√≥digo: ${code}`);
      console.log('üìã Output:', output);

      if (code !== 0) {
        console.log('‚úÖ Teste 2 PASSOU: processo saiu com c√≥digo de erro (como esperado)');
        resolve(true);
      } else {
        console.log('‚ùå Teste 2 FALHOU: processo deveria ter sa√≠do com erro');
        resolve(false);
      }
    });

    // Aguardar um pouco para o processo inicializar
    setTimeout(() => {
      if (!child.killed) {
        child.kill('SIGTERM');
      }
    }, 15000);
  });
}

async function testBootstrapModule() {
  console.log('\nüß™ Teste 3: Verificar se o m√≥dulo bootstrap est√° funcionando...');

  try {
    const bootstrap = require('./bootstrap');
    
    // Verificar se as fun√ß√µes est√£o dispon√≠veis
    if (typeof bootstrap.start === 'function' && 
        typeof bootstrap.isReady === 'function' && 
        typeof bootstrap.getDatabasePool === 'function' && 
        typeof bootstrap.getStatus === 'function') {
      console.log('‚úÖ Teste 3 PASSOU: M√≥dulo bootstrap est√° funcionando corretamente');
      return true;
    } else {
      console.log('‚ùå Teste 3 FALHOU: Fun√ß√µes do bootstrap n√£o est√£o dispon√≠veis');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Teste 3 FALHOU: Erro ao carregar m√≥dulo bootstrap:', error.message);
    return false;
  }
}

async function runSmokeTest() {
  console.log('üöÄ Iniciando Teste de Fuma√ßa do Bootstrap\n');

  try {
    // Teste 1: Verificar comportamento sem DATABASE_URL
    console.log('üìã Teste 1: Verificar comportamento sem DATABASE_URL');
    const noDbTestPassed = await testWithoutDatabase();

    if (!noDbTestPassed) {
      console.log('‚ùå Teste 1 FALHOU: Comportamento sem DATABASE_URL incorreto');
      process.exit(1);
    }

    console.log('‚úÖ Teste 1 PASSOU: Comportamento sem DATABASE_URL correto\n');

    // Teste 2: Verificar comportamento com DATABASE_URL inv√°lido
    console.log('üìã Teste 2: Verificar comportamento com DATABASE_URL inv√°lido');
    const invalidDbTestPassed = await testWithInvalidDatabase();

    if (!invalidDbTestPassed) {
      console.log('‚ùå Teste 2 FALHOU: Comportamento com DATABASE_URL inv√°lido incorreto');
      process.exit(1);
    }

    console.log('‚úÖ Teste 2 PASSOU: Comportamento com DATABASE_URL inv√°lido correto\n');

    // Teste 3: Verificar se o m√≥dulo bootstrap est√° funcionando
    console.log('üìã Teste 3: Verificar se o m√≥dulo bootstrap est√° funcionando');
    const bootstrapTestPassed = await testBootstrapModule();

    if (!bootstrapTestPassed) {
      console.log('‚ùå Teste 3 FALHOU: M√≥dulo bootstrap n√£o est√° funcionando');
      process.exit(1);
    }

    console.log('‚úÖ Teste 3 PASSOU: M√≥dulo bootstrap est√° funcionando\n');

    console.log('üéâ TODOS OS TESTES PASSARAM!');
    console.log('‚úÖ Bootstrap ass√≠ncrono funcionando corretamente');
    console.log('‚úÖ Tratamento de erro sem DATABASE_URL correto');
    console.log('‚úÖ Tratamento de erro com DATABASE_URL inv√°lido correto');
    console.log('‚úÖ M√≥dulo bootstrap carregando corretamente');

    process.exit(0);

  } catch (error) {
    console.error('üí• Erro durante teste de fuma√ßa:', error);
    process.exit(1);
  }
}

// Executar teste se arquivo for chamado diretamente
if (require.main === module) {
  runSmokeTest();
}

module.exports = {
  testWithoutDatabase,
  testWithInvalidDatabase,
  testBootstrapModule,
  runSmokeTest
};