require('dotenv').config();
const axios = require('axios');

/**
 * Teste Completo do Sistema de Tracking da Kwai Event API
 * 
 * Este teste verifica todo o sistema de tracking em modo de produ√ß√£o:
 * 1. Eventos individuais da API
 * 2. Sistema de tracking do frontend
 * 3. Sistema de tracking do backend
 * 4. Integra√ß√£o com o HotBot
 */

// Configura√ß√µes de produ√ß√£o
const PROD_CONFIG = {
  baseUrl: 'https://www.adsnebula.com/log/common/api',
  clickId: 'Lw2HvYVkoj1MyzQwwNX4dg', // Click ID fixo para teste
  pixelId: process.env.KWAI_PIXEL_ID || 'TEST_PIXEL_ID',
  accessToken: process.env.KWAI_ACCESS_TOKEN || 'TEST_ACCESS_TOKEN',
  testFlag: false, // false para produ√ß√£o
  trackFlag: false, // false para produ√ß√£o
  isAttributed: 1,
  mmpcode: 'PL',
  pixelSdkVersion: '9.9.9'
};

/**
 * Fun√ß√£o para enviar evento de produ√ß√£o
 */
async function sendProductionEvent(eventName, properties = {}) {
  try {
    console.log(`\nüéØ Enviando evento de PRODU√á√ÉO: ${eventName}`);
    console.log(`üìã Click ID: ${PROD_CONFIG.clickId}`);
    console.log(`üîß Modo de teste: ${PROD_CONFIG.testFlag ? 'ATIVADO' : 'DESATIVADO'}`);
    console.log(`üìä Track Flag: ${PROD_CONFIG.trackFlag ? 'ATIVADO' : 'DESATIVADO'}`);

    const payload = {
      access_token: PROD_CONFIG.accessToken,
      clickid: PROD_CONFIG.clickId,
      event_name: eventName,
      pixelId: PROD_CONFIG.pixelId,
      testFlag: PROD_CONFIG.testFlag,
      trackFlag: PROD_CONFIG.trackFlag,
      is_attributed: PROD_CONFIG.isAttributed,
      mmpcode: PROD_CONFIG.mmpcode,
      pixelSdkVersion: PROD_CONFIG.pixelSdkVersion
    };

    // Adicionar properties se fornecidas
    if (Object.keys(properties).length > 0) {
      payload.properties = JSON.stringify(properties);
      console.log(`üì¶ Properties:`, properties);
    }

    console.log(`üì§ Payload completo:`, JSON.stringify(payload, null, 2));

    const response = await axios.post(PROD_CONFIG.baseUrl, payload, {
      headers: {
        'Content-Type': 'application/json',
        'accept': 'application/json;charset=utf-8'
      },
      timeout: 15000
    });

    console.log(`‚úÖ ‚úÖ ‚úÖ EVENTO ${eventName} ENVIADO COM SUCESSO EM PRODU√á√ÉO!`);
    console.log(`üìä Status: ${response.status}`);
    console.log(`üìÑ Resposta:`, JSON.stringify(response.data, null, 2));

    return { success: true, data: response.data };

  } catch (error) {
    console.error(`‚ùå ‚ùå ‚ùå ERRO ao enviar evento ${eventName}:`);
    console.error(`üìõ Mensagem: ${error.message}`);
    
    if (error.response) {
      console.error(`üìä Status: ${error.response.status}`);
      console.error(`üìÑ Resposta de erro:`, JSON.stringify(error.response.data, null, 2));
    }
    
    return { success: false, error: error.message };
  }
}

/**
 * Teste 1: Eventos individuais da API
 */
async function testIndividualEvents() {
  console.log('\nüì± TESTE 1: EVENTOS INDIVIDUAIS DA API');
  console.log('=' .repeat(60));

  // EVENT_CONTENT_VIEW
  console.log('\nüéØ EVENT_CONTENT_VIEW (Visualiza√ß√£o de Conte√∫do)');
  console.log('-' .repeat(50));
  await sendProductionEvent('EVENT_CONTENT_VIEW', {
    content_id: 'hotbot_content_001',
    currency: 'BRL',
    content_type: 'product',
    content_name: 'HotBot - Sistema de Entrega'
  });

  await new Promise(resolve => setTimeout(resolve, 2000));

  // EVENT_ADD_TO_CART
  console.log('\nüõí EVENT_ADD_TO_CART (Adicionar ao Carrinho)');
  console.log('-' .repeat(50));
  await sendProductionEvent('EVENT_ADD_TO_CART', {
    value: 97.00,
    currency: 'BRL',
    content_id: 'hotbot_content_001',
    content_type: 'product',
    content_name: 'HotBot - Sistema de Entrega',
    quantity: 1
  });

  await new Promise(resolve => setTimeout(resolve, 2000));

  // EVENT_PURCHASE
  console.log('\nüí∞ EVENT_PURCHASE (Compra Aprovada)');
  console.log('-' .repeat(50));
  await sendProductionEvent('EVENT_PURCHASE', {
    value: 97.00,
    currency: 'BRL',
    content_id: 'hotbot_content_001',
    content_type: 'product',
    content_name: 'HotBot - Sistema de Entrega',
    quantity: 1
  });
}

/**
 * Teste 2: Sistema de tracking do frontend
 */
async function testFrontendTracking() {
  console.log('\nüåê TESTE 2: SISTEMA DE TRACKING DO FRONTEND');
  console.log('=' .repeat(60));

  // Simular evento de clique em CTA
  console.log('\nüéØ Simulando clique em CTA (EVENT_CONTENT_VIEW)');
  console.log('-' .repeat(50));
  await sendProductionEvent('EVENT_CONTENT_VIEW', {
    content_id: 'cta_click_001',
    currency: 'BRL',
    content_type: 'product',
    content_name: 'CTA - HotBot Landing Page'
  });

  await new Promise(resolve => setTimeout(resolve, 2000));

  // Simular evento de formul√°rio
  console.log('\nüìù Simulando envio de formul√°rio (EVENT_FORM_SUBMIT)');
  console.log('-' .repeat(50));
  await sendProductionEvent('EVENT_FORM_SUBMIT', {
    content_id: 'form_submit_001',
    currency: 'BRL',
    content_type: 'product',
    content_name: 'Formul√°rio de Contato'
  });
}

/**
 * Teste 3: Sistema de tracking do backend
 */
async function testBackendTracking() {
  console.log('\n‚öôÔ∏è TESTE 3: SISTEMA DE TRACKING DO BACKEND');
  console.log('=' .repeat(60));

  // Simular gera√ß√£o de PIX (EVENT_ADD_TO_CART)
  console.log('\nüí≥ Simulando gera√ß√£o de PIX (EVENT_ADD_TO_CART)');
  console.log('-' .repeat(50));
  await sendProductionEvent('EVENT_ADD_TO_CART', {
    value: 97.00,
    currency: 'BRL',
    content_id: 'pix_generation_001',
    content_type: 'product',
    content_name: 'PIX - HotBot Premium',
    quantity: 1
  });

  await new Promise(resolve => setTimeout(resolve, 2000));

  // Simular pagamento aprovado (EVENT_PURCHASE)
  console.log('\n‚úÖ Simulando pagamento aprovado (EVENT_PURCHASE)');
  console.log('-' .repeat(50));
  await sendProductionEvent('EVENT_PURCHASE', {
    value: 97.00,
    currency: 'BRL',
    content_id: 'payment_approved_001',
    content_type: 'product',
    content_name: 'Pagamento - HotBot Premium',
    quantity: 1
  });
}

/**
 * Teste 4: Eventos adicionais do sistema
 */
async function testAdditionalEvents() {
  console.log('\nüîß TESTE 4: EVENTOS ADICIONAIS DO SISTEMA');
  console.log('=' .repeat(60));

  // EVENT_INITIATED_CHECKOUT
  console.log('\nüöÄ EVENT_INITIATED_CHECKOUT (In√≠cio do Checkout)');
  console.log('-' .repeat(50));
  await sendProductionEvent('EVENT_INITIATED_CHECKOUT', {
    content_id: 'checkout_start_001',
    currency: 'BRL',
    content_type: 'product',
    content_name: 'Checkout - HotBot Premium'
  });

  await new Promise(resolve => setTimeout(resolve, 2000));

  // EVENT_COMPLETE_REGISTRATION
  console.log('\nüìã EVENT_COMPLETE_REGISTRATION (Registro Completo)');
  console.log('-' .repeat(50));
  await sendProductionEvent('EVENT_COMPLETE_REGISTRATION', {
    content_id: 'registration_001',
    currency: 'BRL',
    content_type: 'product',
    content_name: 'Registro - HotBot Premium'
  });
}

/**
 * Executar todos os testes de produ√ß√£o
 */
async function runProductionTests() {
  console.log('üöÄ INICIANDO TESTES DE PRODU√á√ÉO DA KWAI EVENT API');
  console.log('=' .repeat(70));
  
  // Verificar configura√ß√µes
  console.log('üîß CONFIGURA√á√ïES DE PRODU√á√ÉO:');
  console.log(`   Pixel ID: ${PROD_CONFIG.pixelId}`);
  console.log(`   Access Token: ${PROD_CONFIG.accessToken.substring(0, 10)}...`);
  console.log(`   Click ID: ${PROD_CONFIG.clickId}`);
  console.log(`   URL da API: ${PROD_CONFIG.baseUrl}`);
  console.log(`   Modo de Teste: ${PROD_CONFIG.testFlag ? 'ATIVADO' : 'DESATIVADO'}`);
  console.log(`   Track Flag: ${PROD_CONFIG.trackFlag ? 'ATIVADO' : 'DESATIVADO'}`);
  console.log('=' .repeat(70));

  try {
    // Executar todos os testes
    await testIndividualEvents();
    await testFrontendTracking();
    await testBackendTracking();
    await testAdditionalEvents();

    console.log('\nüéâ TESTES DE PRODU√á√ÉO CONCLU√çDOS COM SUCESSO!');
    console.log('=' .repeat(70));
    console.log('üìã RESUMO DOS TESTES:');
    console.log('‚úÖ Eventos individuais da API');
    console.log('‚úÖ Sistema de tracking do frontend');
    console.log('‚úÖ Sistema de tracking do backend');
    console.log('‚úÖ Eventos adicionais do sistema');
    console.log('');
    console.log('üîç VERIFICA√á√ïES:');
    console.log('1. Verifique se os eventos aparecem na tela de monitoramento do Kwai');
    console.log('2. Confirme que est√£o sendo processados como eventos de produ√ß√£o');
    console.log('3. Verifique se n√£o h√° mais a mensagem "Test Events"');
    console.log('4. Os eventos agora devem aparecer como dados reais de produ√ß√£o');

  } catch (error) {
    console.error('\n‚ùå ERRO durante os testes de produ√ß√£o:', error.message);
  }
}

/**
 * Teste individual de um evento espec√≠fico
 */
async function testSingleProductionEvent(eventName, properties = {}) {
  console.log(`üéØ TESTE INDIVIDUAL DE PRODU√á√ÉO: ${eventName}`);
  console.log('=' .repeat(60));
  
  const result = await sendProductionEvent(eventName, properties);
  
  if (result.success) {
    console.log(`\n‚úÖ Teste do evento ${eventName} conclu√≠do com sucesso em produ√ß√£o!`);
  } else {
    console.log(`\n‚ùå Teste do evento ${eventName} falhou!`);
  }
  
  return result;
}

// Executar testes se o arquivo for chamado diretamente
if (require.main === module) {
  runProductionTests().catch(console.error);
}

module.exports = {
  sendProductionEvent,
  testSingleProductionEvent,
  runProductionTests,
  PROD_CONFIG
};
