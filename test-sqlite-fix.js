const sqlite = require('./database/sqlite');

console.log('üß™ TESTE DA CORRE√á√ÉO SQLITE');
console.log('============================\n');

// 1. Testar get() sem inicializar
console.log('1Ô∏è‚É£ Testando sqlite.get() sem inicializar...');
let db1 = sqlite.get();
console.log('   - db1 exists:', !!db1);
console.log('   - db1 type:', typeof db1);

// 2. Inicializar SQLite
console.log('\n2Ô∏è‚É£ Inicializando SQLite...');
const initResult = sqlite.initialize('./pagamentos.db');
console.log('   - Initialize result:', !!initResult);

// 3. Testar get() ap√≥s inicializar
console.log('\n3Ô∏è‚É£ Testando sqlite.get() ap√≥s inicializar...');
let db2 = sqlite.get();
console.log('   - db2 exists:', !!db2);
console.log('   - db2 type:', typeof db2);

// 4. Testar se db2 tem m√©todos necess√°rios
if (db2) {
  console.log('\n4Ô∏è‚É£ Testando m√©todos do db2...');
  console.log('   - db2.get exists:', typeof db2.get);
  console.log('   - db2.prepare exists:', typeof db2.prepare);
  console.log('   - db2.run exists:', typeof db2.run);
  console.log('   - db2 constructor:', db2.constructor.name);
  
  // 5. Testar query simples
  try {
    console.log('\n5Ô∏è‚É£ Testando query simples...');
    const testQuery = db2.prepare('SELECT COUNT(*) as count FROM tokens');
    const result = testQuery.get();
    console.log('   - Query result:', result);
    console.log('   - ‚úÖ SQLite funcionando perfeitamente!');
  } catch (error) {
    console.error('   - ‚ùå Erro na query:', error.message);
  }
} else {
  console.error('\n‚ùå db2 √© null - corre√ß√£o n√£o funcionou');
}

console.log('\nüéØ RESULTADO:');
if (db2 && typeof db2.prepare === 'function') {
  console.log('‚úÖ CORRE√á√ÉO FUNCIONA! sqlite.get() retorna inst√¢ncia v√°lida do better-sqlite3');
} else {
  console.error('‚ùå CORRE√á√ÉO FALHOU! sqlite.get() ainda retorna null');
}
